{

    "playButtonTooltip": "Play / pause",
    "jumpForwardsTooltip": "Jump forwards",
    "jumpBackwardsTooltip": "Jump backwards",
    "settingsButtonTooltip": "Settings",

    "infoButtLabel": "Info",
    "navigationButtonLabel": "Navigation",
    "formButtonLabel": "Input",


    "settingsTitle": "Settings",
    "settingsThemeLabel": "Theme:",
    "settingsJumpLabel": "Jump duration (seconds)",
    "settingsLanguageLabel": "Language",

    "themeOptionDefault": "Default",
    "themeOptionNew": "Test",
    
    "languageOptionEN": "English",
    "languageOptionDE": "German",

    "formTitle": "Rijndael Animation Data",
    "formInfo": "Updatating change the animation. Try it out!",
    "plaintextLabel": "Plaintext",
    "keyLabel": "Key",
    "outputLabel": "Output",
    "encryptButtonLabel": "Encrypt",

    "page-1-title": "Page 1 - Rijndael Animation Intro",
    "page-1-info": "<p>This animation gives a high-level overview of the inner workings of the AES Rijndael algorithm. It uses a size of 128 bit for both, the data block, and the key. For an in-depth look at the mathematics behind the algorithm please consult the according literature.</p>",

    "page-2-title": "Page 2 - Encryption Overview",
    "page-2-info": "<p>The Advanced Encryption Standard (AES) is also known by its original name Rijndael. It is a symmetric block cipher. This page displays the inputs (plaintext and cipher key) and output (ciphertext) of the Rijndael encryption process.</p>",

    "page-3-title": "Page 3 - Encryption Process and Cipher Key",
    "page-3-info": "<p>AES is a subset of the Rijndael block cipher. While the Rijndael algorithm allows for a range of key and block sizes (128, 160, 192, 224, 256 bit), AES is not that flexible. AES has a fixed block length of 128 bit and only allows 128, 192, and 256 bits as key lengths.</p><p>The state and key can be visualized as a rectangular array of Bytes. While the state/key length divided by 32 determines the number of columns, each column will always consist of 4 bytes. The number of columns in the state is usually denoted as Nb and the number of columns in the cipher Key as Nk. These columns are also sometimes referred to as words.</p><p>As we use a 128 Bit length for both the state and the key in this animation both, Nb and Nk, in this case, are 4. The resulting arrays can thus be displayed as four by four tables, using hexadecimal notation for the byte value.</p><p> For the sake of clarity, the encryption process and the creation of the key schedule are presented in separate sections. Since the actual encryption process is the more interesting part for most people, this will be covered first in part A. In the normal process the key schedule is of course generated before the encryption process.</p>",

    "page-4-title": "Page 4 - A) Encryption Process",
    "page-4-info": "<p>This section explains the encryption process and its operations. The decryption process works very similarly in an inverted manner. </p>",

    "page-5-title": "Page 5 - Encryption Process Overview",
    "page-5-info": "<p>The AES Rijndael encryption is an iterative process. The amount of rounds depends on the key length.</p><ul><li>10 rounds for 128-bit keys.</li><li>12 rounds for 192-bit keys.</li><li>14 rounds for 256-bit keys.</li></ul><p> Each of the iterations, except the last one, performs the same four operations in the following order:</p><ul><li>SubBytes</li><li>ShiftRows</li><li>MixColumns</li><li>AddRoundKey</li></ul><p>The last round skips the MixColumns step. Additionally, there is an initial round at the start, which only performs the AddRoundKey operation.</p>",

    "page-6-title": "Page 6 - Transformation Types",
    "page-6-info": "<p>The following pages (pages 7-10) cover the four transformations the AES Rijndael algorithm uses. These operations are SubBytes, ShiftRows, MixColumns, and AddRoundKey.</p> ",

    "page-7-title": "Page 7 - SubBytes",
    "page-7-info": "<p>The SubBytes transformation replaces each byte in the state using an 8-bit substitution box, commonly referred to as S-Box. Using the S-Box provides the non-linearity in the cipher. To reverse this step, the inverse of the S-Box is used in the decryption process. </p>",

    "page-8-title": "Page 8 - ShiftRows",
    "page-8-info": "<p>In the ShiftRows transformation, the Bytes of each row are shifted by a given offset. The first row is always left unchanged, while the offset for rows two to four depends on the block length. </p><p>For a block length of 128 bit (4 Nb) the bytes in rows two, three, and four are shifted by one, two, and three respectively. </p></p>Shifting the rows by these pre-defined offsets creates an output in which each column of the output state contains bytes from each column of the input state. </p><p>The goal of this step is to ensure that the columns are not encrypted independently.</p>",

    "page-9-title": "Page 9 - MixColumns",
    "page-9-info": "<p>In the MixColumns transformation, the four bytes of each column of the state are combined using an invertible linear transformation. The Mix columns function takes four bytes as an input and outputs four bytes. Together with ShiftRows, MixColumns provides diffusion in this cipher. </p>",

    "page-10-title": "Page 10 - AddRoundKey",
    "page-10-info": "<p>In the AddRoundKey transformation, a round key is applied to the state by a simple bitwise XOR. This Round Key was created by expanding the key before the encryption/decryption process (more on page 13+). It is derived from the Cipher key and is equal in size to the block length.</p>",

    "page-11-title": "Page 11 - Rounds 1 - 5",
    "page-11-info": "<p>This page displays the states after each transformation during iterations 1 to 5 of the encryption process.</p> ",

    "page-12-title": "Page 12 - Rounds 6 - 10",
    "page-12-info": "<p>This page displays the states after each transformation during iterations 6 to 10 of the encryption process, as well as the final output.</p>",

    "page-13-title": "Page 13 - B) Key Schedule",
    "page-13-info": "<p>The given cipher key (main key) is expanded to create round keys used in each iteration in the encryption / decryption process. The number of Round Keys is equal to the number of rounds plus one and their size depends on the message block's length. </p>",

    "page-14-title": "Page 14 - Key Expansion",
    "page-14-info": "<p>The key schedule is the means by which the cipher key gets expanded into a set of round keys. This happens before the encryption/decryption process. The number of resulting round key bits is equal to the block length multiplied by the number of rounds plus one (here 128 bits * 11 = 1408 round key bits).</p><p>Reminder: Nb = number of words in message block, Nk = number of words in cipher key.</p><p>This expanded key is an array of 4-byte words (W). The first Nb words are filled with the cipher key. The following words are then recursively defined using words with smaller indices.</p><p>The exact operations used for this depend on the value of Nk. There are two sets of operations, one for Nk â‰¤ 6 and one for Nk > 6.</p><p>Each word following the cipher key gets created by using an XOR on the previous word W[i-1] and the word Nk positions earlier W[i-Nk]. </p><p>For words in positions that are a multiple of Nk, a transformation is applied to W[i-1] before the XOR. Additionally a round constant (Rcon) is XORed. </p><p>The transformation on W[i-1] consists of a cyclic shift of the bytes in the word (RotByte), followed by a table lookup to all four bytes of the word (SubBytes).</p><p>The individual round key (i) can then be defined by selecting the sub-array W[Nb * i] to W[Nb *  (i+1)].</p>",


  
    "page-1": {
        "titlePartOne": "Rijndael",
        "titlePartTwo": "Cipher",
        "text": "Animation using a 128 bit size for each the data block and the key"
    },
    "page-2": {
        "boxText": "Rijndael Encryptor",
        "textLeft": "Cipher key",
        "textBottom": "Ciphertext",
        "textTop": "Plaintext"
    },
    "page-3": {
        "title": "Input",
        "subtitleLeft": "State",
        "subtitleRight": "Cipher key",
        "explanationLeft": "This is a block from the plaintext message to be encrypted",
        "explanationRight": "Hexadecimal notation (sample):",
        "textLeft": "to Encryption Process",
        "textRight": "to key Schedule"
    },
    "page-4": {
        "title": "Encryption Process",
        "text": "(Performing the encryption of the given plaintext block using 4 diffrent transformation in the initial round, the 9 main rounds and the final round)"
    },
    "page-5": {
        "title": "Encryption Process",

        "titleInitialRound": "initial round",
        "titleMainRounds": "9 main rounds",
        "titleFinalRound": "final round",
        "labelInitial": "AddRoundKey",
        "labelMrone": "1-SubBytes",
        "labelMrTwo": "2-ShiftRows",
        "labelMrThree": "3-MixColumns",
        "labelMrFour": "4-addRoundKey",
        "labelFrOne": "SubBytes",
        "labelFrTwo": "ShiftRows",
        "labelFrThree": "AddRoundKey",

        "boxTitleOne": "CipherKey",
        "boxTitleTwo": "Round key 0",
        "boxTitleThree": "Round Key 10",
        "round": "Round"
    },
    "page-6": {
        "title": "The 4 types of transformations:",
        "labelone": "1-SubBytes",
        "labelTwo": "2-ShiftRows",
        "labelThree": "3-MixColumns",
        "labelFour": "4-addRoundKey"
    },
    "page-7": {
        "title": "1 - SubBytes",
        "round": "Round 1",
        "sboxLabel": "S-Box",
        "sboxExplanation": "byte substitution table"
    },
    "page-8": {
        "title": "2 - ShiftRows",
        "rotateTextOne": "rotate over 2 bytes",
        "rotateTextTwo": "rotate over 2 bytes",
        "rotateTextThree": "rotate over 2 bytes"
    },
    "page-9": {
        "title": "3 - MixColumns",
        "text": "The four numbers of one column are modulo multiplied in Rijndael's Galois Field by a given matrix.",
        "text2": "The MixColumns step along wit hthe ShiftRows step is the primary source of diffusion in Rijndael."
    },
    "page-10": {
        "title": "4 - AddRoundKey",
        "roundKeyLabel": "Round key",
        "roundKeyText": "(Produced as Round key 1 during the Key Schedule - see slide 14"
    },
    "page-11": {
        "introText": "These transformations are applied to the State for 9 more rounds. The final round does not include the MixColumns transformation.",
        "roundLabel": "Start of round",
        "subBytesLabel": "After SubBytes",
        "ShiftRowsLabel": "After ShiftRows",
        "MixColumnsLabel": "After MixColumns",
        "RoundKeyLabel": "Round key",
        "inputLabel": "Input",
        "roundOneLabel": "Round 1",
        "roundTwoLabel": "Round 2",
        "roundThreeLabel": "Round 3",
        "roundFourLabel": "Round 4",
        "roundFiveLabel": "Round 5"
    },
    "page-12": {
        "roundLabel": "Start of round",
        "subBytesLabel": "SubBytes",
        "ShiftRowsLabel": "ShiftRows",
        "MixColumnsLabel": "MixColumns",
        "RoundKeyLabel": "Round key",
        "outputLabel": "Output",
        "roundSixLabel": "Round 6",
        "roundSevenLabel": "Round 7",
        "roundEightLabel": "Round 8",
        "roundNineLabel": "Round 9",
        "roundTenLabel": "Round 10",
        "cipherTextLabel": "Ciphertext"
    },
    "page-13": {
        "title": "Key Schedule",
        "text": "(Expansion of the given Cipher key into 11 partial keys, used in the initial round, the 9 main rounds and the final round)"
    },
    "page-14": {
        "title": "Key Schedule",
        "RotWordLabel": "RotWord",
        "RconLabel": "Rcon",
        "SubBytesLabel": "SubBytes",
        "SBoxLabel": "S-Box",
        "WOne": "Wi-4",
        "WTwo": "Wi-1",
        "WThree": "Wi",
        "RconFourLabel": "Rcon(4)",


        "textIntro": "The expanded key can be seen as an array of 32-bit words (columns), numbered from 0 to 43. The first four columns are filled with the given Cipher key",
        "text": "Words in positions that are multiple of 4 (W4, W5, ..., W40) are calculated by:",
        "textA": "a) applying the RotWord and SubBytes transformation to the previous word wi-1",
        "textB": "b) Adding (XOR) this result to the word 4 positions earlier wi-4, plus a round constatn Rcon",
        "textXOR": "The remaining 32-bit words wi, are calculated by adding (XOR) the previous word wi-1 with the word 4 positions earlier Wi-4",

        "cipherKeyLabel": "cipher key",
        "roundKeyOneLabel": "Round key 1",
        "roundKeyTwoLabel": "Round key 2",
        "roundKeyThreeLabel": "Round key 3",
        "roundKeyTenLabel": "Round key 10"
    }
}